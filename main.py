"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ "–ì–æ–ª–æ—Å—Ç–∏–∫–µ—Ä—ã".
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
"""
import asyncio
import signal
import sys
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import (
    BOT_TOKEN, STORAGE_DIR, DB_PATH, LOGS_DIR,
    WHISPER_TIMEOUT, SD_TIMEOUT, get_device_config
)
from logger import setup_logging, get_logger
from db_manager.manager import DatabaseManager
from bot_handlers import register_handlers

# –î–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
from stt_service.service import load_whisper_model
from image_generation_service.service import load_stable_diffusion_pipeline

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging()
logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è graceful shutdown
should_exit = False


class BotApplication:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –±–æ—Ç–∞."""
    
    def __init__(self):
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.db_manager: Optional[DatabaseManager] = None
        self._running = False
    
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞."""
        logger.info("=" * 60)
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ '–ì–æ–ª–æ—Å—Ç–∏–∫–µ—Ä—ã'")
        logger.info("=" * 60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self._check_configuration()
        
        # 2. –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._create_directories()
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self._init_database()
        
        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        self._init_bot()
        
        # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º ML –º–æ–¥–µ–ª–∏
        await self._load_models()
        
        # 6. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    def _check_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # BOT_TOKEN —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ config.py
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
        try:
            import subprocess
            result = subprocess.run(
                ["ffmpeg", "-version"], 
                capture_output=True, 
                text=True,
                timeout=5
            )
            if result.returncode != 0:
                raise Exception("ffmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            logger.info("‚úì ffmpeg –Ω–∞–π–¥–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except (subprocess.SubprocessError, FileNotFoundError) as e:
            logger.warning(
                "‚ö† ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. "
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ: "
                "https://ffmpeg.org/download.html"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_config = get_device_config()
        logger.info(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_config}")
    
    def _create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        directories = {
            "storage": STORAGE_DIR,
            "logs": LOGS_DIR,
            "models_cache": Path(".cache/models"),
        }
        
        for name, path in directories.items():
            path = Path(path)
            path.mkdir(parents=True, exist_ok=True)
            logger.info(f"‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{name}': {path}")
    
    async def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        self.db_manager = DatabaseManager(str(DB_PATH))
        await self.db_manager.create_table()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ë–î
        stats = await self.db_manager.get_stats()
        logger.info(f"‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {stats.get('total_stickers', 0)}")
    
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä."""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.bot = Bot(
            token=BOT_TOKEN, 
            default=DefaultBotProperties(
                parse_mode=ParseMode.MARKDOWN,
                link_preview_is_disabled=True
            )
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.dp["logger"] = logger
        self.dp["db_manager"] = self.db_manager
        self.dp["storage_dir"] = str(STORAGE_DIR)
        self.dp["bot_instance"] = self.bot
        
        logger.info("‚úì –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _load_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ML –º–æ–¥–µ–ª–∏."""
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–µ–π (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Whisper —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            logger.info("‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
            whisper_task = asyncio.create_task(load_whisper_model())
            await asyncio.wait_for(whisper_task, timeout=WHISPER_TIMEOUT)
            logger.info("‚úì –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Stable Diffusion —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            logger.info("‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Stable Diffusion...")
            sd_task = asyncio.create_task(load_stable_diffusion_pipeline())
            await asyncio.wait_for(sd_task, timeout=SD_TIMEOUT)
            logger.info("‚úì –ú–æ–¥–µ–ª—å Stable Diffusion –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except asyncio.TimeoutError:
            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
            raise
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        register_handlers(self.dp)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
        self.dp.startup.register(self._on_startup)
        self.dp.shutdown.register(self._on_shutdown)
        
        logger.info("‚úì –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _on_startup(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
        self._running = True
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        # await self._notify_admin("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    async def _on_shutdown(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞."""
        self._running = False
        logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.db_manager:
            await self.db_manager.close_connection()
            logger.info("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        if self.bot:
            await self.bot.session.close()
            logger.info("‚úì –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        try:
            await self.setup()
            
            logger.info("–ó–∞–ø—É—Å–∫ polling...")
            await self.dp.start_polling(
                self.bot, 
                skip_updates=True,
                allowed_updates=["message", "callback_query"]
            )
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            raise
        finally:
            # –í—ã–∑—ã–≤–∞–µ–º shutdown –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            if self._running:
                await self._on_shutdown()


def setup_signal_handlers(app: BotApplication):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."""
    
    def signal_handler(sig, frame):
        global should_exit
        should_exit = True
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        asyncio.create_task(app._on_shutdown())
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –î–ª—è Windows
    if sys.platform == "win32":
        signal.signal(signal.SIGBREAK, signal_handler)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = BotApplication()
    setup_signal_handlers(app)
    
    try:
        await app.run()
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º event loop –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if sys.platform == "win32":
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º ProactorEventLoop
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)