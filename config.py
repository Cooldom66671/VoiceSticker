"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram-–±–æ—Ç–∞ "–ì–æ–ª–æ—Å—Ç–∏–∫–µ—Ä—ã".
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import os
import sys
from pathlib import Path
from typing import Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ë–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏ ---
# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).resolve().parent
# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = BASE_DIR / "data"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –ë–æ—Ç–∞ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("–û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞ BOT_TOKEN=your_token_here")
    sys.exit(1)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ ---
# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
STORAGE_DIR = Path(os.getenv("STORAGE_DIR", "storage"))
if not STORAGE_DIR.is_absolute():
    STORAGE_DIR = BASE_DIR / STORAGE_DIR

# –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
LOGS_DIR = Path(os.getenv("LOGS_DIR", "logs"))
if not LOGS_DIR.is_absolute():
    LOGS_DIR = BASE_DIR / LOGS_DIR

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
DB_PATH = Path(os.getenv("DB_PATH", "stickers.db"))
if not DB_PATH.is_absolute():
    DB_PATH = BASE_DIR / DB_PATH

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–µ–π ---
# Whisper
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "base")
WHISPER_DEVICE = os.getenv("WHISPER_DEVICE", "cpu")  # cpu, cuda, mps

# Stable Diffusion
STABLE_DIFFUSION_MODEL = os.getenv("STABLE_DIFFUSION_MODEL", "runwayml/stable-diffusion-v1-5")
SD_DEVICE = os.getenv("SD_DEVICE", "mps")  # cpu, cuda, mps
SD_DTYPE = os.getenv("SD_DTYPE", "float16")  # float16, float32

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Stable Diffusion
SD_NUM_INFERENCE_STEPS = int(os.getenv("SD_NUM_INFERENCE_STEPS", "30"))
SD_GUIDANCE_SCALE = float(os.getenv("SD_GUIDANCE_SCALE", "7.5"))
SD_HEIGHT = int(os.getenv("SD_HEIGHT", "512"))
SD_WIDTH = int(os.getenv("SD_WIDTH", "512"))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ ---
STICKER_MAX_SIZE = 512  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
STICKER_FORMAT = "PNG"  # –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å—Ç–∏–∫–µ—Ä–∞
STICKER_QUALITY = 95  # –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (–¥–ª—è JPEG)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---
MAX_AUDIO_SIZE_MB = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ –ú–ë
MAX_AUDIO_DURATION_SEC = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
ALLOWED_AUDIO_FORMATS = {".ogg", ".oga", ".mp3", ".wav", ".m4a"}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
# –¢–∞–π–º–∞—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
WHISPER_TIMEOUT = int(os.getenv("WHISPER_TIMEOUT", "30"))
SD_TIMEOUT = int(os.getenv("SD_TIMEOUT", "60"))
DB_TIMEOUT = int(os.getenv("DB_TIMEOUT", "5"))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
LOG_DATE_FORMAT = "%Y-%m-%d %H:%M:%S"
LOG_FILE_MAX_BYTES = 10 * 1024 * 1024  # 10 MB
LOG_FILE_BACKUP_COUNT = 5

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
# –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGES = {
    "start": (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç *–ì–æ–ª–æ—Å—Ç–∏–∫–µ—Ä—ã*!\n\n"
        "üé§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤.\n"
        "‚úçÔ∏è –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∏ —è –ø—Ä–µ–≤—Ä–∞—â—É –µ–≥–æ –≤ —Å—Ç–∏–∫–µ—Ä!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    ),
    "help": (
        "ü§ñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*\n\n"
        "1Ô∏è‚É£ *–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n"
        "   ‚Ä¢ –ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "   ‚Ä¢ –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–≤–æ—é —Ä–µ—á—å\n"
        "   ‚Ä¢ –°–æ–∑–¥–∞–º —Å—Ç–∏–∫–µ—Ä –ø–æ —Ç–≤–æ–∏–º —Å–ª–æ–≤–∞–º\n\n"
        "2Ô∏è‚É£ *–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n"
        "   ‚Ä¢ –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞\n"
        "   ‚Ä¢ –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "üìù *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
        "   ‚Ä¢ ¬´–ú–∏–ª—ã–π –∫–æ—Ç–∏–∫ —Å —Ä–∞–¥—É–≥–æ–π¬ª\n"
        "   ‚Ä¢ ¬´–ö–æ—Å–º–æ–Ω–∞–≤—Ç –Ω–∞ –õ—É–Ω–µ¬ª\n"
        "   ‚Ä¢ ¬´–ü–∏—Ü—Ü–∞ —Å —É–ª—ã–±–∫–æ–π¬ª\n\n"
        "‚ö° *–°–æ–≤–µ—Ç—ã:*\n"
        "   ‚Ä¢ –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏\n"
        "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ\n"
        "   ‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π —ç–º–æ—Ü–∏–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
        "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç 10-30 —Å–µ–∫—É–Ω–¥"
    ),
    "processing_voice": "üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
    "transcription_result": "üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: *{}*\n\nüé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏–∫–µ—Ä...",
    "processing_text": "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∏–∫–µ—Ä –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é...",
    "sticker_ready": "‚úÖ –°—Ç–∏–∫–µ—Ä –≥–æ—Ç–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.",
    "error_transcription": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    "error_generation": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
    "error_processing": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    "error_file_too_large": "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {} –ú–ë",
    "error_invalid_format": "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.",
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_device_config():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã."""
    import torch
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if torch.cuda.is_available() and SD_DEVICE == "cuda":
        return {
            "whisper_device": "cuda",
            "sd_device": "cuda",
            "sd_dtype": torch.float16 if SD_DTYPE == "float16" else torch.float32
        }
    elif torch.backends.mps.is_available() and SD_DEVICE == "mps":
        return {
            "whisper_device": "cpu",  # Whisper –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ CPU –¥–ª—è Apple Silicon
            "sd_device": "mps",
            "sd_dtype": torch.float16 if SD_DTYPE == "float16" else torch.float32
        }
    else:
        return {
            "whisper_device": "cpu",
            "sd_device": "cpu",
            "sd_dtype": torch.float32  # float16 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ CPU
        }

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
for directory in [STORAGE_DIR, LOGS_DIR]:
    directory.mkdir(parents=True, exist_ok=True)