version: '3.8'

# =============================================
# Networks
# =============================================
networks:
  bot_network:
    driver: bridge
    name: golostickery_network
    ipam:
      config:
        - subnet: 172.28.0.0/16

  monitoring_network:
    driver: bridge
    name: monitoring_network
    
# =============================================
# Volumes
# =============================================
volumes:
  # Bot data
  storage_data:
    name: golostickery_storage
  logs_data:
    name: golostickery_logs
  models_data:
    name: golostickery_models
  
  # Cache volumes
  huggingface_cache:
    name: golostickery_huggingface_cache
  whisper_cache:
    name: golostickery_whisper_cache
  pip_cache:
    name: golostickery_pip_cache
  
  # Database
  db_data:
    name: golostickery_db
    
  # Redis
  redis_data:
    name: golostickery_redis
    
  # Monitoring
  prometheus_data:
    name: golostickery_prometheus
  grafana_data:
    name: golostickery_grafana
  loki_data:
    name: golostickery_loki

# =============================================
# Services
# =============================================
services:
  # ---------------------------------------------
  # Main Bot Service
  # ---------------------------------------------
  bot:
    container_name: golostickery_bot
    
    # Build configuration
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime  # Use 'development' for dev environment
      args:
        - PYTHON_VERSION=3.11
      cache_from:
        - python:3.11-slim-bookworm
    
    # Use pre-built image (alternative to build)
    # image: golostickery:latest
    
    # Environment configuration
    env_file:
      - .env
    
    environment:
      # System
      - PYTHONUNBUFFERED=1
      - TZ=Europe/Moscow
      
      # Application
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      
      # Redis connection
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Monitoring
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=9090
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    
    # Volumes
    volumes:
      # Application data
      - storage_data:/app/storage
      - logs_data:/app/logs
      - models_data:/app/models
      - db_data:/app
      
      # Cache directories
      - huggingface_cache:/root/.cache/huggingface
      - whisper_cache:/root/.cache/whisper
      - pip_cache:/root/.cache/pip
      
      # For development - mount source code
      # - ./:/app:rw
    
    # Networking
    networks:
      bot_network:
        ipv4_address: 172.28.1.2
      monitoring_network:
    
    # Port mapping (for webhook mode)
    ports:
      - "8443:8443"  # Webhook port
      - "9090:9090"  # Metrics port
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=bot"
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Labels for organization
    labels:
      - "com.golostickery.service=bot"
      - "com.golostickery.version=1.0.0"

  # ---------------------------------------------
  # Redis Service (for FSM storage)
  # ---------------------------------------------
  redis:
    container_name: golostickery_redis
    image: redis:7-alpine
    
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data
    
    networks:
      bot_network:
        ipv4_address: 172.28.1.3
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---------------------------------------------
  # Nginx Reverse Proxy (for webhook mode)
  # ---------------------------------------------
  nginx:
    container_name: golostickery_nginx
    image: nginx:alpine
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    
    ports:
      - "80:80"
      - "443:443"
    
    networks:
      bot_network:
        ipv4_address: 172.28.1.4
    
    depends_on:
      - bot
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---------------------------------------------
  # Prometheus (Metrics Collection)
  # ---------------------------------------------
  prometheus:
    container_name: golostickery_prometheus
    image: prom/prometheus:latest
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    networks:
      monitoring_network:
      bot_network:
        ipv4_address: 172.28.1.10
    
    ports:
      - "9091:9090"
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---------------------------------------------
  # Grafana (Metrics Visualization)
  # ---------------------------------------------
  grafana:
    container_name: golostickery_grafana
    image: grafana/grafana:latest
    
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    
    networks:
      monitoring_network:
      bot_network:
        ipv4_address: 172.28.1.11
    
    ports:
      - "3000:3000"
    
    depends_on:
      - prometheus
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---------------------------------------------
  # Loki (Log Aggregation)
  # ---------------------------------------------
  loki:
    container_name: golostickery_loki
    image: grafana/loki:latest
    
    command: -config.file=/etc/loki/local-config.yaml
    
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    
    networks:
      monitoring_network:
      bot_network:
        ipv4_address: 172.28.1.12
    
    ports:
      - "3100:3100"
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---------------------------------------------
  # Promtail (Log Collector)
  # ---------------------------------------------
  promtail:
    container_name: golostickery_promtail
    image: grafana/promtail:latest
    
    command: -config.file=/etc/promtail/config.yml
    
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - logs_data:/var/log/golostickery:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    networks:
      monitoring_network:
      bot_network:
        ipv4_address: 172.28.1.13
    
    depends_on:
      - loki
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # ---------------------------------------------
  # Backup Service (Optional)
  # ---------------------------------------------
  backup:
    container_name: golostickery_backup
    image: offen/docker-volume-backup:latest
    
    environment:
      - BACKUP_SOURCES=/backup
      - BACKUP_CRON_EXPRESSION=0 2 * * *
      - BACKUP_RETENTION_DAYS=7
      - BACKUP_FILENAME=golostickery-backup-%Y-%m-%d.tar.gz
    
    volumes:
      - storage_data:/backup/storage:ro
      - db_data:/backup/db:ro
      - ./backups:/archive
    
    networks:
      bot_network:
        ipv4_address: 172.28.1.20
    
    restart: unless-stopped
    
    profiles:
      - backup

# =============================================
# GPU Support Configuration
# =============================================
# For NVIDIA GPU support, use this configuration:
#
# services:
#   bot-gpu:
#     extends:
#       service: bot
#     build:
#       target: gpu-runtime
#     deploy:
#       resources:
#         reservations:
#           devices:
#             - driver: nvidia
#               count: 1
#               capabilities: [gpu]

# =============================================
# Development Configuration
# =============================================
# For development, use docker-compose.override.yml:
#
# version: '3.8'
# services:
#   bot:
#     build:
#       target: development
#     volumes:
#       - ./:/app:rw
#     environment:
#       - ENVIRONMENT=development
#       - LOG_LEVEL=DEBUG
#     command: python main.py